library(tidyverse)
library(ggplot2)
library(Rmisc)
library(GGally)
library(chron)
library(cclust)
library(taRifx)

# setting language for the names of days to english names
# (no need to run on english computer)
Sys.setlocale("LC_TIME","en_US.UTF-8")

### Initial Analysis 
### 1.

Characteristics <- read.csv('Characteristics.csv',stringsAsFactors = F)
head(Characteristics)
# summarising data frame to look for missing values
summary(is.na(Characteristics)) # No missing values
# ordinary summary of data frame
summary(Characteristics)

p1 <- ggplot(Characteristics,aes(x=Percentage_IC))+
  geom_histogram(colour='black',fill='blue')+
  labs(x='Percentage of industrial and commercial customers',
       y='frequency')

levels(factor(Characteristics$Transformer_RATING)) # 17 levels

p2 <- ggplot(Characteristics,aes(x=Transformer_RATING))+
  geom_histogram(colour='black',fill='blue',bins = 17)+
  # bins=17 because of 17 levels in Transformer_RATING
  labs(x='Transformer Rating',
       y='frequency')

levels(factor(Characteristics$TRANSFORMER_TYPE)) # 2 levels with very long names
# let's rename them for easier use:
TT_fct <- factor(Characteristics$TRANSFORMER_TYPE)
levels(TT_fct) <- c('Ground','Pole Mounted')
Characteristics$TRANSFORMER_TYPE <- TT_fct

p3 <- ggplot(Characteristics,aes(x=as.factor(TRANSFORMER_TYPE)))+
  geom_bar(colour='black',fill='blue',bins = 2)+
  labs(x='Transformer Type',
       y='frequency')

multiplot(p1,p2,p3,cols=3)

# Compare plots with summary (median etc: does it fit? does it make sense?)

### 2.

# pair plot for substation characteristics facetted by transformer type
ggpairs(Characteristics,columns = 2:6)

# LV Feeder Count and Total customers fairly high correlation: as expected since
# more feeders are needed if there is a higher number of power users.
# There are a few differences regarding Transformer types:
# The distribution of the number of total customers is quite focused on the lower end for pole mounted 
# transformers; whereas for ground mounted transformers, the number of total customers is more
# spread out. Similarly, the transformer ratings and their feeder counts are skewed towards
# the lower end for pole mounted transformers and more spread out for ground mounted transformers. 
# Furthermore, the percentage of industrial and commercial customers is similarly distributed: peaks
# towards both ends (towards 0% and towards 100%).
# --> correspondance between TType and Tot custom, Perc, and feeder count

head(Characteristics)

### 3. 

# loading Autumn Data
load('Autumn_2012.rdata')
AutumnData <- Autumn_2012

# Distance matrix
head(AutumnData)
# Separating Scaled measurements
ScaledAutumn <- AutumnData[,1:146]
ScaledAutumn
# Averages per interval per substation
DailyAverages <- ScaledAutumn[-2] %>%
  group_by(Station) %>%
  summarise_all(mean) %>%
  mutate(Station=as.factor(Station))
# First look
head(DailyAverages)
# distance matrix
autumn_dist <- dist(DailyAverages[-1])
head(autumn_dist)
# hclust & dendogram
autumn_hclust <- hclust(autumn_dist)
plot(hclust(autumn_dist))

### 4.

## KMEANS testing with elbow method

tot_ss <- c()
clust_num <- c()
for(i in 1:10){
  tot_ss[i] <- kmeans(DailyAverages[,-1],i)$tot.withinss
  clust_num[i] <- i
}
# 
plot(clust_num,tot_ss,)

tot_clust_df <- data.frame(clust_num,tot_ss)
# Fit the smoothed spline (with 3 degrees of freedom)
out.spl <- with(tot_clust_df, smooth.spline(clust_num,tot_ss,df=3))
# Finally, predict to calculate the second derivative of which the maximum of y will
# give us the point of maximum curvature.
derivative.out <- with(tot_clust_df,predict(out.spl,x=clust_num,deriv=2))

plot(derivative.out$x,derivative.out$y)

# The optimal number of clusters is 4. vb

# There appears to be 4 distinct clusters
clusters <- kmeans(DailyAverages[,-1],4)

# now let's label each Substation with it's respective cluster
DailyAverages$cluster <- as.factor(clusters$cluster)

### 5.
# date and days modifications
ScaledAutumn$Julian_Date <- ScaledAutumn$Date
ScaledAutumn$Date <- dates(ScaledAutumn[,2], origin = c(month = 1,day = 1,year = 1970))
ScaledAutumn$Day <- weekdays(as.Date(ScaledAutumn$Date,'%m/%d/%y'))
# renaming the day levels for easier filtering in the future
day_fact <- factor(ScaledAutumn$Day)
levels(day_fact) <- c('Weekday','Weekday',
                      'Saturday','Sunday',
                      'Weekday','Weekday',
                      'Weekday')

ScaledAutumn$Day <- day_fact

# Separating days


###  Cluster 1 stations
stations1 <- DailyAverages %>%
  filter(cluster==1) %>%
  select(Station)
# filtering for cluster 1 stations for different days
autumn1 <- ScaledAutumn %>%
  filter(Station %in% stations1$Station)

## All days 

Station1All <- autumn1 %>%
  select(-Date,-Day,-Julian_Date)%>%
  group_by(Station)%>%
  summarise_all(mean)%>%
  gather(key=time_interval,value=scaled_power,-Station) %>%
  mutate(time_interval=as.numeric(time_interval)) %>%
  mutate(Station=as.factor(Station))
# mean of all days
s1meanAll <- autumn1 %>%
  select(-Date,-Day,-Julian_Date)%>%
  summarise_all(mean) %>%
  gather(key=time_interval,value=scaled_power,-Station)%>%
  mutate(time_interval=as.numeric(time_interval)) %>%
  mutate(Station=as.factor(Station))

## Week days

Station1Week <- autumn1 %>%
  filter(Day=='Weekday') %>%
  select(-Date,-Day,-Julian_Date)%>%
  group_by(Station)%>%
  summarise_all(mean)%>%
  gather(key=time_interval,value=scaled_power,-Station) %>%
  mutate(time_interval=as.numeric(time_interval)) %>%
  mutate(Station=as.factor(Station))
# mean
s1meanWeek <- autumn1 %>%
  filter(Day=='Weekday') %>%
  select(-Date,-Day,-Julian_Date)%>%
  summarise_all(mean) %>%
  gather(key=time_interval,value=scaled_power,-Station)%>%
  mutate(time_interval=as.numeric(time_interval)) %>%
  mutate(Station=as.factor(Station))

## Saturdays

Station1Sat <- autumn1 %>%
  filter(Day=='Saturday') %>%
  select(-Date,-Day,-Julian_Date)%>%
  group_by(Station)%>%
  summarise_all(mean)%>%
  gather(key=time_interval,value=scaled_power,-Station) %>%
  mutate(time_interval=as.numeric(time_interval)) %>%
  mutate(Station=as.factor(Station))
# mean
s1meanSat <- autumn1 %>%
  filter(Day=='Saturday') %>%
  select(-Date,-Day,-Julian_Date)%>%
  summarise_all(mean) %>%
  gather(key=time_interval,value=scaled_power,-Station)%>%
  mutate(time_interval=as.numeric(time_interval)) %>%
  mutate(Station=as.factor(Station))

## Sundays

Station1Sun <- autumn1 %>%
  filter(Day=='Sunday')%>%
  select(-Date,-Day,-Julian_Date)%>%
  group_by(Station)%>%
  summarise_all(mean)%>%
  gather(key=time_interval,value=scaled_power,-Station) %>%
  mutate(time_interval=as.numeric(time_interval)) %>%
  mutate(Station=as.factor(Station))
# mean

s1meanSun <- autumn1 %>%
  filter(Day=='Sunday') %>%
  select(-Date,-Day,-Julian_Date)%>%
  summarise_all(mean) %>%
  gather(key=time_interval,value=scaled_power,-Station)%>%
  mutate(time_interval=as.numeric(time_interval)) %>%
  mutate(Station=as.factor(Station))

## Plots

s1p <- ggplot(Station1All, aes(x=time_interval,y=scaled_power,colour=Station))+
  geom_line(show.legend=FALSE,size=0.3)+
  geom_line(data=s1meanAll,aes(x=time_interval,y=scaled_power),colour='black',size=1)+
  labs(x='Time Interval',y='Average Demand') + 
  ggtitle('All Days Cluster 1')

s1p1 <- ggplot(Station1Week, aes(x=time_interval,y=scaled_power,colour=Station))+
  geom_line(show.legend=FALSE,size=0.3)+
  geom_line(data=s1meanWeek,aes(x=time_interval,y=scaled_power),colour='black',size=1)+
  labs(x='Time Interval',y='Average Demand') + 
  ggtitle('Week Days Cluster 1')

s1p2 <- ggplot(Station1Sat, aes(x=time_interval,y=scaled_power,colour=Station))+
  geom_line(show.legend=FALSE,size=0.3)+
  geom_line(data=s1meanSat,aes(x=time_interval,y=scaled_power),colour='black',size=1)+
  labs(x='Time Interval',y='Average Demand') + 
  ggtitle('Saturdays Cluster 1')

s1p3 <- ggplot(Station1Sun, aes(x=time_interval,y=scaled_power,colour=Station))+
  geom_line(show.legend=FALSE,size=0.3)+
  geom_line(data=s1meanSun,aes(x=time_interval,y=scaled_power),colour='black',size=1)+
  labs(x='Time Interval',y='Average Demand') + 
  ggtitle('Sundays Cluster 1')


### Cluster 2 stations
stations2 <- DailyAverages %>%
  filter(cluster==2) %>%
  select(Station)

# filtering for cluster 2 stations
autumn2 <- ScaledAutumn %>%
  filter(Station %in% stations2$Station)

## All days

Station2All <- autumn2 %>%
  select(-Date,-Day,-Julian_Date)%>%
  group_by(Station)%>%
  summarise_all(mean)%>%
  gather(key=time_interval,value=scaled_power,-Station) %>%
  mutate(time_interval=as.numeric(time_interval)) %>%
  mutate(Station=as.factor(Station))
# mean
s2meanAll <- autumn2 %>%
  select(-Date,-Day,-Julian_Date)%>%
  summarise_all(mean) %>%
  gather(key=time_interval,value=scaled_power,-Station)%>%
  mutate(time_interval=as.numeric(time_interval)) %>%
  mutate(Station=as.factor(Station))

## Week days

Station2Week <- autumn2 %>%
  filter(Day=='Weekday')%>%
  select(-Date,-Day,-Julian_Date)%>%
  group_by(Station)%>%
  summarise_all(mean)%>%
  gather(key=time_interval,value=scaled_power,-Station) %>%
  mutate(time_interval=as.numeric(time_interval)) %>%
  mutate(Station=as.factor(Station))
# mean
s2meanWeek <- autumn2 %>%
  filter(Day=='Weekday')%>%
  select(-Date,-Day,-Julian_Date)%>%
  summarise_all(mean) %>%
  gather(key=time_interval,value=scaled_power,-Station)%>%
  mutate(time_interval=as.numeric(time_interval)) %>%
  mutate(Station=as.factor(Station))

## Saturdays

Station2Sat <- autumn2 %>%
  filter(Day=='Saturday')%>%
  select(-Date,-Day,-Julian_Date)%>%
  group_by(Station)%>%
  summarise_all(mean)%>%
  gather(key=time_interval,value=scaled_power,-Station) %>%
  mutate(time_interval=as.numeric(time_interval)) %>%
  mutate(Station=as.factor(Station))
# mean
s2meanSat <- autumn2 %>%
  filter(Day=='Saturday')%>%
  select(-Date,-Day,-Julian_Date)%>%
  summarise_all(mean) %>%
  gather(key=time_interval,value=scaled_power,-Station)%>%
  mutate(time_interval=as.numeric(time_interval)) %>%
  mutate(Station=as.factor(Station))

## Sundays

Station2Sun <- autumn2 %>%
  filter(Day=='Sunday')%>%
  select(-Date,-Day,-Julian_Date)%>%
  group_by(Station)%>%
  summarise_all(mean)%>%
  gather(key=time_interval,value=scaled_power,-Station) %>%
  mutate(time_interval=as.numeric(time_interval)) %>%
  mutate(Station=as.factor(Station))
# mean
s2meanSun <- autumn2 %>%
  filter(Day=='Sunday')%>%
  select(-Date,-Day,-Julian_Date)%>%
  summarise_all(mean) %>%
  gather(key=time_interval,value=scaled_power,-Station)%>%
  mutate(time_interval=as.numeric(time_interval)) %>%
  mutate(Station=as.factor(Station))

## Plots

s2p <- ggplot(Station2All, aes(x=time_interval,y=scaled_power,colour=Station))+
  geom_line(show.legend=FALSE,size=0.3)+
  geom_line(data=s2meanAll,aes(x=time_interval,y=scaled_power),colour='black',size=1)+
  labs(x='Time Interval',y='Average Demand') + 
  ggtitle('All Days Cluster 2')

s2p1 <- ggplot(Station2Week, aes(x=time_interval,y=scaled_power,colour=Station))+
  geom_line(show.legend=FALSE,size=0.3)+
  geom_line(data=s2meanWeek,aes(x=time_interval,y=scaled_power),colour='black',size=1)+
  labs(x='Time Interval',y='Average Demand') + 
  ggtitle('Week Days Cluster 2')

s2p2 <- ggplot(Station2Sat, aes(x=time_interval,y=scaled_power,colour=Station))+
  geom_line(show.legend=FALSE,size=0.3)+
  geom_line(data=s2meanSat,aes(x=time_interval,y=scaled_power),colour='black',size=1)+
  labs(x='Time Interval',y='Average Demand') + 
  ggtitle('Saturdays Cluster 2')

s2p3 <- ggplot(Station2Sun, aes(x=time_interval,y=scaled_power,colour=Station))+
  geom_line(show.legend=FALSE,size=0.3)+
  geom_line(data=s2meanSun,aes(x=time_interval,y=scaled_power),colour='black',size=1)+
  labs(x='Time Interval',y='Average Demand') + 
  ggtitle('Sundays Cluster 2')

###  Cluster 3 stations
stations3 <- DailyAverages %>%
  filter(cluster==3) %>%
  select(Station)
# filtering for cluster 3 stations for different days
autumn3 <- ScaledAutumn %>%
  filter(Station %in% stations3$Station)

## All days 

Station3All <- autumn3 %>%
  select(-Date,-Day,-Julian_Date)%>%
  group_by(Station)%>%
  summarise_all(mean)%>%
  gather(key=time_interval,value=scaled_power,-Station) %>%
  mutate(time_interval=as.numeric(time_interval)) %>%
  mutate(Station=as.factor(Station))
# mean of all days
s3meanAll <- autumn3 %>%
  select(-Date,-Day,-Julian_Date)%>%
  summarise_all(mean) %>%
  gather(key=time_interval,value=scaled_power,-Station)%>%
  mutate(time_interval=as.numeric(time_interval)) %>%
  mutate(Station=as.factor(Station))

## Week days

Station3Week <- autumn3 %>%
  filter(Day=='Weekday') %>%
  select(-Date,-Day,-Julian_Date)%>%
  group_by(Station)%>%
  summarise_all(mean)%>%
  gather(key=time_interval,value=scaled_power,-Station) %>%
  mutate(time_interval=as.numeric(time_interval)) %>%
  mutate(Station=as.factor(Station))
# mean
s3meanWeek <- autumn3 %>%
  filter(Day=='Weekday') %>%
  select(-Date,-Day,-Julian_Date)%>%
  summarise_all(mean) %>%
  gather(key=time_interval,value=scaled_power,-Station)%>%
  mutate(time_interval=as.numeric(time_interval)) %>%
  mutate(Station=as.factor(Station))

## Saturdays

Station3Sat <- autumn3 %>%
  filter(Day=='Saturday') %>%
  select(-Date,-Day,-Julian_Date)%>%
  group_by(Station)%>%
  summarise_all(mean)%>%
  gather(key=time_interval,value=scaled_power,-Station) %>%
  mutate(time_interval=as.numeric(time_interval)) %>%
  mutate(Station=as.factor(Station))
# mean
s3meanSat <- autumn3 %>%
  filter(Day=='Saturday') %>%
  select(-Date,-Day,-Julian_Date)%>%
  summarise_all(mean) %>%
  gather(key=time_interval,value=scaled_power,-Station)%>%
  mutate(time_interval=as.numeric(time_interval)) %>%
  mutate(Station=as.factor(Station))

## Sundays

Station3Sun <- autumn3 %>%
  filter(Day=='Sunday')%>%
  select(-Date,-Day,-Julian_Date)%>%
  group_by(Station)%>%
  summarise_all(mean)%>%
  gather(key=time_interval,value=scaled_power,-Station) %>%
  mutate(time_interval=as.numeric(time_interval)) %>%
  mutate(Station=as.factor(Station))
# mean

s3meanSun <- autumn3 %>%
  filter(Day=='Sunday') %>%
  select(-Date,-Day,-Julian_Date)%>%
  summarise_all(mean) %>%
  gather(key=time_interval,value=scaled_power,-Station)%>%
  mutate(time_interval=as.numeric(time_interval)) %>%
  mutate(Station=as.factor(Station))

## Plots

s3p <- ggplot(Station3All, aes(x=time_interval,y=scaled_power,colour=Station))+
  geom_line(show.legend=FALSE,size=0.3)+
  geom_line(data=s3meanAll,aes(x=time_interval,y=scaled_power),colour='black',size=1)+
  labs(x='Time Interval',y='Average Demand') + 
  ggtitle('All Days Cluster 3')

s3p1 <- ggplot(Station3Week, aes(x=time_interval,y=scaled_power,colour=Station))+
  geom_line(show.legend=FALSE,size=0.3)+
  geom_line(data=s3meanWeek,aes(x=time_interval,y=scaled_power),colour='black',size=1)+
  labs(x='Time Interval',y='Average Demand') + 
  ggtitle('Week Days Cluster 3')

s3p2 <- ggplot(Station3Sat, aes(x=time_interval,y=scaled_power,colour=Station))+
  geom_line(show.legend=FALSE,size=0.3)+
  geom_line(data=s3meanSat,aes(x=time_interval,y=scaled_power),colour='black',size=1)+
  labs(x='Time Interval',y='Average Demand') + 
  ggtitle('Saturdays Cluster 3')

s3p3 <- ggplot(Station3Sun, aes(x=time_interval,y=scaled_power,colour=Station))+
  geom_line(show.legend=FALSE,size=0.3)+
  geom_line(data=s3meanSun,aes(x=time_interval,y=scaled_power),colour='black',size=1)+
  labs(x='Time Interval',y='Average Demand') + 
  ggtitle('Sundays Cluster 3')

###  Cluster 4 stations
stations4 <- DailyAverages %>%
  filter(cluster==4) %>%
  select(Station)
# filtering for cluster 4 stations for different days
autumn4 <- ScaledAutumn %>%
  filter(Station %in% stations4$Station)

## All days 

Station4All <- autumn4 %>%
  select(-Date,-Day,-Julian_Date)%>%
  group_by(Station)%>%
  summarise_all(mean)%>%
  gather(key=time_interval,value=scaled_power,-Station) %>%
  mutate(time_interval=as.numeric(time_interval)) %>%
  mutate(Station=as.factor(Station))
# mean of all days
s4meanAll <- autumn4 %>%
  select(-Date,-Day,-Julian_Date)%>%
  summarise_all(mean) %>%
  gather(key=time_interval,value=scaled_power,-Station)%>%
  mutate(time_interval=as.numeric(time_interval)) %>%
  mutate(Station=as.factor(Station))

## Week days

Station4Week <- autumn4 %>%
  filter(Day=='Weekday') %>%
  select(-Date,-Day,-Julian_Date)%>%
  group_by(Station)%>%
  summarise_all(mean)%>%
  gather(key=time_interval,value=scaled_power,-Station) %>%
  mutate(time_interval=as.numeric(time_interval)) %>%
  mutate(Station=as.factor(Station))
# mean
s4meanWeek <- autumn4 %>%
  filter(Day=='Weekday') %>%
  select(-Date,-Day,-Julian_Date)%>%
  summarise_all(mean) %>%
  gather(key=time_interval,value=scaled_power,-Station)%>%
  mutate(time_interval=as.numeric(time_interval)) %>%
  mutate(Station=as.factor(Station))

## Saturdays

Station4Sat <- autumn4 %>%
  filter(Day=='Saturday') %>%
  select(-Date,-Day,-Julian_Date)%>%
  group_by(Station)%>%
  summarise_all(mean)%>%
  gather(key=time_interval,value=scaled_power,-Station) %>%
  mutate(time_interval=as.numeric(time_interval)) %>%
  mutate(Station=as.factor(Station))
# mean
s4meanSat <- autumn4 %>%
  filter(Day=='Saturday') %>%
  select(-Date,-Day,-Julian_Date)%>%
  summarise_all(mean) %>%
  gather(key=time_interval,value=scaled_power,-Station)%>%
  mutate(time_interval=as.numeric(time_interval)) %>%
  mutate(Station=as.factor(Station))

## Sundays

Station4Sun <- autumn4 %>%
  filter(Day=='Sunday')%>%
  select(-Date,-Day,-Julian_Date)%>%
  group_by(Station)%>%
  summarise_all(mean)%>%
  gather(key=time_interval,value=scaled_power,-Station) %>%
  mutate(time_interval=as.numeric(time_interval)) %>%
  mutate(Station=as.factor(Station))
# mean

s4meanSun <- autumn4 %>%
  filter(Day=='Sunday') %>%
  select(-Date,-Day,-Julian_Date)%>%
  summarise_all(mean) %>%
  gather(key=time_interval,value=scaled_power,-Station)%>%
  mutate(time_interval=as.numeric(time_interval)) %>%
  mutate(Station=as.factor(Station))

## Plots

s4p <- ggplot(Station4All, aes(x=time_interval,y=scaled_power,colour=Station))+
  geom_line(show.legend=FALSE,size=0.3)+
  geom_line(data=s4meanAll,aes(x=time_interval,y=scaled_power),colour='black',size=1)+
  labs(x='Time Interval',y='Average Demand') + 
  ggtitle('All Days Cluster 4')

s4p1 <- ggplot(Station4Week, aes(x=time_interval,y=scaled_power,colour=Station))+
  geom_line(show.legend=FALSE,size=0.3)+
  geom_line(data=s4meanWeek,aes(x=time_interval,y=scaled_power),colour='black',size=1)+
  labs(x='Time Interval',y='Average Demand') + 
  ggtitle('Week Days Cluster 4')

s4p2 <- ggplot(Station4Sat, aes(x=time_interval,y=scaled_power,colour=Station))+
  geom_line(show.legend=FALSE,size=0.3)+
  geom_line(data=s4meanSat,aes(x=time_interval,y=scaled_power),colour='black',size=1)+
  labs(x='Time Interval',y='Average Demand') + 
  ggtitle('Saturdays Cluster 4')

s4p3 <- ggplot(Station4Sun, aes(x=time_interval,y=scaled_power,colour=Station))+
  geom_line(show.legend=FALSE,size=0.3)+
  geom_line(data=s4meanSun,aes(x=time_interval,y=scaled_power),colour='black',size=1)+
  labs(x='Time Interval',y='Average Demand') + 
  ggtitle('Sundays Cluster 4')

dev.off()

multiplot(s1p,s1p1,s1p2,s1p3,cols=2)
multiplot(s2p,s2p1,s2p2,s2p3,cols=2)
multiplot(s3p,s3p1,s3p2,s3p3,cols=2)
multiplot(s4p,s4p1,s4p2,s4p3,cols=2)

### 6.

Characteristics1 <- Characteristics %>%
  filter(SUBSTATION_NUMBER %in% stations1$Station)

Characteristics2 <- Characteristics %>%
  filter(SUBSTATION_NUMBER %in% stations2$Station)

Characteristics3 <- Characteristics %>%
  filter(SUBSTATION_NUMBER %in% stations3$Station)

Characteristics4 <- Characteristics %>%
  filter(SUBSTATION_NUMBER %in% stations4$Station)



# Cluster 1
summary(Characteristics1)
# Cluster 2
summary(Characteristics2)
# Cluster 3
summary(Characteristics3)
# Cluster 4
summary(Characteristics4)

### 7.

# Let's dive deeper into the Substations characteristics:
# for cluster 1
ggpairs(Characteristics1,columns = 2:6)
# for cluster 2
ggpairs(Characteristics2, columns = 2:6)
# for cluster 3
ggpairs(Characteristics3,columns = 2:6)
# for cluster 4
ggpairs(Characteristics4, columns = 2:6)

# Let's have a look at the percentages of the number of transformers per type per cluster:

Transformer_types_clstr1 <- table(Characteristics1$TRANSFORMER_TYPE)
Transformer_types_clstr2 <- table(Characteristics2$TRANSFORMER_TYPE)
Transformer_types_clstr3 <- table(Characteristics3$TRANSFORMER_TYPE)
Transformer_types_clstr4 <- table(Characteristics4$TRANSFORMER_TYPE)

perc_types_clstr1 <- data.frame(Ground=Transformer_types_clstr1[1]/sum(Transformer_types_clstr1),
                         Pole=Transformer_types_clstr1[2]/sum(Transformer_types_clstr1))
rownames(perc_types_clstr1) <- 'Transformer type percentages for Cluster 1'

perc_types_clstr2 <- data.frame(Ground=round(Transformer_types_clstr2[1]/sum(Transformer_types_clstr2),2),
                         Pole=round(Transformer_types_clstr2[2]/sum(Transformer_types_clstr2),2))
rownames(perc_types_clstr2) <- 'Transformer type percentages for Cluster 2'

perc_types_clstr3 <- data.frame(Ground=Transformer_types_clstr3[1]/sum(Transformer_types_clstr3),
                                Pole=Transformer_types_clstr3[2]/sum(Transformer_types_clstr3))
rownames(perc_types_clstr3) <- 'Transformer type percentages for Cluster 3'

perc_types_clstr4 <- data.frame(Ground=round(Transformer_types_clstr4[1]/sum(Transformer_types_clstr4),2),
                                Pole=round(Transformer_types_clstr4[2]/sum(Transformer_types_clstr4),2))
rownames(perc_types_clstr4) <- 'Transformer type percentages for Cluster 4'

Transformer_types_percentages <- rbind(perc_types_clstr1,
                                       perc_types_clstr2,
                                       perc_types_clstr3,
                                       perc_types_clstr4)
Transformer_types_percentages

# Cluster 1:
# - TransfType:
# 80% of Ground vs 20% of pole, indicating predominantly urban landscape,
# with a fairly important part of rural landscape. 
# - Percentage: 
# Percentage of Industrial and Commercial customers highly skewed towards the lower end:
# close to 0, and a much lower amount of percentages when it comes closer to 100%. 
# We can also see that it's the ground transformers that make up most of the values for 
# high percentages. 
# - Total number of customers = higher

# Cluster 2:
# - TransfType:
#  Here we have approximately 96% of Ground mounted transformers and 4% of Pole mounted 
# transformers (indicating a much larger ground mounted predominance than cluster 1).
# --> mainly urban landscape
# - Percentage: 
# Here we see a more evenly distributed Percentage of IC: there still are two distinct peaks towards
# both ends (0% and 100%) but this time, there is a much more even distribution and there are almost 
# double as many high percentages as in cluster 1.
# - Total number of customers  = higher 



### 8.

# Loading the data set
NewSubstations <- read.csv('NewSubstations.csv')
NewSubstations$Date <- as.Date(NewSubstations$Date)
NewSubstations$Day <- weekdays(NewSubstations$Date)
# renaming the day levels for easier filtering in the future
new_day_fact <- factor(NewSubstations$Day)
levels(new_day_fact) <- c('Weekday','Weekday',
                      'Saturday','Sunday',
                      'Weekday','Weekday',
                      'Weekday')

NewSubstations$Day <- new_day_fact
NewSubstations$Day

# find names of Substations to select them
levels(factor(Week$Substation))

## Substation 511079
Sub1 <- NewSubstations %>%
  filter(Substation=='511079')

# Filter data frame by type of day
Sub1All <- Sub1 %>%
  select(-Date,-Day,-X) %>%
  group_by(Substation) %>%
  summarise_all(mean) 

Sub1Week <- Sub1 %>%
  filter(Day=='Weekday') %>%
  select(-Date,-Day,-X) %>%
  group_by(Substation) %>%
  summarise_all(mean) 

Sub1Sat <- Sub1 %>%
  filter(Day=='Saturday') %>%
  select(-Date,-Day,-X) %>%
  group_by(Substation) %>%
  summarise_all(mean) 

Sub1Sun <- Sub1 %>%
  filter(Day=='Sunday') %>%
  select(-Date,-Day,-X) %>%
  group_by(Substation) %>%
  summarise_all(mean) 

# combining to prepare for plotting
Sub1DF <- rbind(Sub1All,Sub1Week,Sub1Sat,Sub1Sun)

# Adding the type of day for plotting multiple lines per type of day
Sub1DF$Day_Type <- c('All days','Week days','Saturdays','Sundays')

# Collapsing columns for plotting
Sub1DF <- Sub1DF %>%
  gather(key='time_interval',value='average_power',-Substation,-Day_Type) %>%
  mutate(daytype=as.factor(Day_Type))

# Remove the 'X' in the interval name to be able to convert it to numeric
Sub1DF$time_interval <- as.numeric(gsub('X','',Sub1DF$time_interval))

NewPlot1 <- ggplot(Sub1DF,aes(x=time_interval,y=average_power,colour=Day_Type))+
  geom_line()+
  labs(x='Time interval',y='Average real power demand')+
  ggtitle('Substation 511079')

## Substation 512457
Sub2 <- NewSubstations %>%
  filter(Substation=='512457')

# Filter data frame by type of day
Sub2All <- Sub2 %>%
  select(-Date,-Day,-X) %>%
  group_by(Substation) %>%
  summarise_all(mean) 

Sub2Week <- Sub2 %>%
  filter(Day=='Weekday') %>%
  select(-Date,-Day,-X) %>%
  group_by(Substation) %>%
  summarise_all(mean) 

Sub2Sat <- Sub2 %>%
  filter(Day=='Saturday') %>%
  select(-Date,-Day,-X) %>%
  group_by(Substation) %>%
  summarise_all(mean) 

Sub2Sun <- Sub2 %>%
  filter(Day=='Sunday') %>%
  select(-Date,-Day,-X) %>%
  group_by(Substation) %>%
  summarise_all(mean) 

# combining to prepare for plotting
Sub2DF <- rbind(Sub2All,Sub2Week,Sub2Sat,Sub2Sun)

# Adding the type of day for plotting multiple lines per type of day
Sub2DF$Day_Type <- c('All days','Week days','Saturdays','Sundays')

# Collapsing columns for plotting
Sub2DF <- Sub2DF %>%
  gather(key='time_interval',value='average_power',-Substation,-Day_Type) %>%
  mutate(daytype=as.factor(Day_Type))

# Remove the 'X' in the interval name to be able to convert it to numeric
Sub2DF$time_interval <- as.numeric(gsub('X','',Sub2DF$time_interval))

NewPlot2 <- ggplot(Sub2DF,aes(x=time_interval,y=average_power,colour=Day_Type))+
  geom_line()+
  labs(x='Time interval',y='Average real power demand')+
  ggtitle('Substation 512457')

## Substation 532697
Sub3 <- NewSubstations %>%
  filter(Substation=='532697')

# Filter data frame by type of day
Sub3All <- Sub3 %>%
  select(-Date,-Day,-X) %>%
  group_by(Substation) %>%
  summarise_all(mean) 

Sub3Week <- Sub3 %>%
  filter(Day=='Weekday') %>%
  select(-Date,-Day,-X) %>%
  group_by(Substation) %>%
  summarise_all(mean) 

Sub3Sat <- Sub3 %>%
  filter(Day=='Saturday') %>%
  select(-Date,-Day,-X) %>%
  group_by(Substation) %>%
  summarise_all(mean) 

Sub3Sun <- Sub3 %>%
  filter(Day=='Sunday') %>%
  select(-Date,-Day,-X) %>%
  group_by(Substation) %>%
  summarise_all(mean) 

# combining to prepare for plotting
Sub3DF <- rbind(Sub3All,Sub3Week,Sub3Sat,Sub3Sun)

# Adding the type of day for plotting multiple lines per type of day
Sub3DF$Day_Type <- c('All days','Week days','Saturdays','Sundays')

# Collapsing columns for plotting
Sub3DF <- Sub3DF %>%
  gather(key='time_interval',value='average_power',-Substation,-Day_Type) %>%
  mutate(daytype=as.factor(Day_Type))

# Remove the 'X' in the interval name to be able to convert it to numeric
Sub3DF$time_interval <- as.numeric(gsub('X','',Sub3DF$time_interval))

NewPlot3 <- ggplot(Sub3DF,aes(x=time_interval,y=average_power,colour=Day_Type))+
  geom_line()+
  labs(x='Time interval',y='Average real power demand')+
  ggtitle('Substation 532697')

## Substation 552863
Sub4 <- NewSubstations %>%
  filter(Substation=='552863')

# Filter data frame by type of day
Sub4All <- Sub4 %>%
  select(-Date,-Day,-X) %>%
  group_by(Substation) %>%
  summarise_all(mean) 

Sub4Week <- Sub4 %>%
  filter(Day=='Weekday') %>%
  select(-Date,-Day,-X) %>%
  group_by(Substation) %>%
  summarise_all(mean) 

Sub4Sat <- Sub4 %>%
  filter(Day=='Saturday') %>%
  select(-Date,-Day,-X) %>%
  group_by(Substation) %>%
  summarise_all(mean) 

Sub4Sun <- Sub4 %>%
  filter(Day=='Sunday') %>%
  select(-Date,-Day,-X) %>%
  group_by(Substation) %>%
  summarise_all(mean) 

# combining to prepare for plotting
Sub4DF <- rbind(Sub4All,Sub4Week,Sub4Sat,Sub4Sun)

# Adding the type of day for plotting multiple lines per type of day
Sub4DF$Day_Type <- c('All days','Week days','Saturdays','Sundays')

# Collapsing columns for plotting
Sub4DF <- Sub4DF %>%
  gather(key='time_interval',value='average_power',-Substation,-Day_Type) %>%
  mutate(daytype=as.factor(Day_Type))

# Remove the 'X' in the interval name to be able to convert it to numeric
Sub4DF$time_interval <- as.numeric(gsub('X','',Sub4DF$time_interval))

NewPlot4 <- ggplot(Sub4DF,aes(x=time_interval,y=average_power,colour=Day_Type))+
  geom_line()+
  labs(x='Time interval',y='Average real power demand')+
  ggtitle('Substation 552863')

## Substation 563729
Sub5 <- NewSubstations %>%
  filter(Substation=='563729')

# Filter data frame by type of day
Sub5All <- Sub5 %>%
  select(-Date,-Day,-X) %>%
  group_by(Substation) %>%
  summarise_all(mean) 

Sub5Week <- Sub5 %>%
  filter(Day=='Weekday') %>%
  select(-Date,-Day,-X) %>%
  group_by(Substation) %>%
  summarise_all(mean) 

Sub5Sat <- Sub5 %>%
  filter(Day=='Saturday') %>%
  select(-Date,-Day,-X) %>%
  group_by(Substation) %>%
  summarise_all(mean) 

Sub5Sun <- Sub5 %>%
  filter(Day=='Sunday') %>%
  select(-Date,-Day,-X) %>%
  group_by(Substation) %>%
  summarise_all(mean) 

# combining to prepare for plotting
Sub5DF <- rbind(Sub5All,Sub5Week,Sub5Sat,Sub5Sun)

# Adding the type of day for plotting multiple lines per type of day
Sub5DF$Day_Type <- c('All days','Week days','Saturdays','Sundays')

# Collapsing columns for plotting
Sub5DF <- Sub5DF %>%
  gather(key='time_interval',value='average_power',-Substation,-Day_Type) %>%
  mutate(daytype=as.factor(Day_Type))

# Remove the 'X' in the interval name to be able to convert it to numeric
Sub5DF$time_interval <- as.numeric(gsub('X','',Sub5DF$time_interval))

NewPlot5 <- ggplot(Sub5DF,aes(x=time_interval,y=average_power,colour=Day_Type))+
  geom_line()+
  labs(x='Time interval',y='Average real power demand')+
  ggtitle('Substation 512457')

multiplot(NewPlot1,NewPlot2,NewPlot3,NewPlot4,NewPlot5,cols=3)

### 9

## Find centers of clusters and measure the distances with new subs
## Cluster centers?

clust1_matrix <- autumn1[,c(-1,-2,-147,-148)]
clust2_matrix <- autumn2[,c(-1,-2,-147,-148)]


NewPlot5 <- ggplot(Sub5DF,aes(x=time_interval,y=average_power,colour=Day_Type))+
  geom_line()+
  labs(x='Time interval',y='Average real power demand')+
  ggtitle('Substation 512457')

multiplot(NewPlot1,NewPlot2,NewPlot3,NewPlot4,NewPlot5,cols=3)

### 9

## Find centers of clusters and measure the distances with new subs
## Cluster centers?

clust1_matrix <- autumn1[,c(-1,-2,-147,-148)]
clust2_matrix <- autumn2[,c(-1,-2,-147,-148)]
